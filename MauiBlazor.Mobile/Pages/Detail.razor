@page "/detail/{cardId:int}"

@using QRCoder;
@using System.IO;
@using System.Drawing;

@using Microsoft.AspNetCore.Components;
@using MauiBlazor.Mobile.MauiPages;

@using MauiBlazor.Shared.Models;
@using MauiBlazor.Mobile.Data;
@using CommunityToolkit.Maui.Core;
@using MauiBlazor.Mobile.Services;
@using MauiBlazor.Mobile.Constants;

@using MauiPopup;

@inject HttpClient HttpClient;
@inject NavigationManager NavigationManager;


<style>
    body {
        background-color: #EFF0F4;
    }

    h6 {
        font-weight: regular;
        color: #5E5B67;
    }

    h5 {
/*        font-weight: bold;*/
        color: black;
    }

    h4 {
/*        font-weight: bold;*/
        color: black;
    }

    .toolbar {
        color: white; /* Yazı rengi */
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0 20px 10px;
        height: 50px; /* Toolbar yüksekliği */
    }


    .page-title {
        font-size: 24px; /* Sayfa başlık font boyutu */
        color: #322F40;
    }

    .frame {
        background-color: white;
        border-radius: 12px;
        padding: 10px 20px 10px 20px;
    }
</style>

@if (pageStatus == DetailPageStatus.EditStatus)
{

    <EditForm Model="@cardModel" OnValidSubmit="EditButtonClicked">

        <div class="toolbar">
            <a onclick="NavigationManager.Uri.NavigateTo(_pageState.PreviousPage())"><h5 style="color: #FF0000;">Delete</h5></a>

            @*<h2 class="page-title">Card Detail</h2>
            <button type="submit"><h5 style="color: black;">Done</h5></button>*@

            <textbutton type="submit">
                <h5 style="color: black;">Done</h5>
            </textbutton>
        </div>
        <div style="text-align: center;">

            <img src="Images/user.png" height="45" width="45" style="margin: 15px 0;" />

        </div>

        <div class="column">

            <div class="frame">
                <h5>Display Name</h5>
                <InputText @bind-Value="@cardModel.DisplayName" />
            </div>
            <div class="frame">
                <h5>Job Title</h5>
                <InputText @bind-Value="@cardModel.JobTitle" />
            </div>
            <div class="frame">
                <h5>Phone</h5>
                @*<InputNumber @bind-Value="@cardModel.Phone" />*@
            </div>
            <div class="frame">
                <h5>Mail</h5>
                <InputText @bind-Value="@cardModel.Mail" />
            </div>
            <div class="frame">
                <h5>Website Url</h5>
                <InputText @bind-Value="@cardModel.WebsiteUrl" />
            </div>
            <div class="frame">
                <h5>Address</h5>
                <InputText @bind-Value="@cardModel.Address" />
            </div>

         @*<button type="submit">Save</button>*@

        </div>
    </EditForm>



}
else if (pageStatus == DetailPageStatus.CardDetailStatus)
{

    <div class="toolbar">
            <a onclick="NavigationManager.Uri.NavigateTo(_pageState.PreviousPage())"><img class="left-icon" width="45px;" height="45px;" src="Images/back.png" /></a>

            <h2 class="page-title">Card Detail</h2>
            <a onclick="@ShareUriAsync"><img class="right-icon" width="30px;" height="30px;" src="Images/share.png" /></a>
        </div>

    <div style="text-align: center;">

        <img src="Images/user.png" height="45" width="45" style="margin: 15px 0;" />
        <h2>@cardModel.DisplayName</h2>
        <h3>@cardModel.JobTitle</h3>
    </div>

    <div class="hstack gap-3 d-flex justify-content-center" style="margin: 15px 0;">
            <Button style="background-color: #fff; color:black;" @onclick="() => OpenDisplayPagePopup()">Show QR</Button>
            <Button style="background-color: #fff; color:black;" @onclick="() => Emit(DetailPageStatus.EditStatus)">Edit</Button>
            <Button style="background-color: #FFBEBE; color: #FF0000" @onclick="DeleteButtonClicked">Delete</Button>

        </div>
    
    <div class="frame">
        <h6>Phone</h6>
        <h5>@cardModel.Phone</h5>
    </div>
    <div class="frame">
        <h6>Mail</h6>
        <h5>@cardModel.Mail</h5>
    </div>
    <div class="frame">
        <h6>Website Address</h6>
        <h5>@cardModel.WebsiteUrl</h5>
    </div>
    <div class="frame">
        <h6>Address</h6>
        <h5>@cardModel.Address</h5>
    </div>
    @*<div class="frame">
        <div class="column">

            <h5>Phone</h5>
            <h4>@cardModel.Phone</h4>

            <h5>Mail</h5>
            <h4>@cardModel.Mail</h4>

            <h5>Website Address</h5>
            <h4>@cardModel.WebsiteUrl</h4>

            <h5>Address</h5>
            <h4>@cardModel.Address</h4>

        </div>
    </div>*@
    }

@code{



    public enum DetailPageStatus
    {
        CardDetailStatus,
        ShowQRStatus,
        EditStatus,
        ErrorStatus,
        LoadingStatus
    };

    CardModel cardModel;

    [Parameter]
    public int cardId { get; set; }


    DetailPageStatus pageStatus = DetailPageStatus.LoadingStatus;

    protected override async Task OnInitializedAsync()
    {

        ResponseModel<CardModel> responseModel = await CardService.GetCardDetailByCardId(cardId);
        SemanticScreenReader.Announce(responseModel.Message);
        await CommunityToolkit.Maui.Alerts.Toast.Make(responseModel.Message, ToastDuration.Long, 16).Show(new CancellationTokenSource().Token);

        if (responseModel.Success)
        {
            cardModel = responseModel.Data;
            pageStatus = DetailPageStatus.CardDetailStatus;

        }
        else
        {
            pageStatus = DetailPageStatus.ErrorStatus;
        }

    }

    protected void Emit(DetailPageStatus detailPageStatus)
    {
        pageStatus = detailPageStatus;
    }

    protected async void DeleteButtonClicked()
    {
        CardService cardService = new CardService();
        ResponseModel<string> responseModel = await cardService.DeleteCard(cardModel);

        if (responseModel.Success)
        {
            SemanticScreenReader.Announce("Card deleted.");
            await CommunityToolkit.Maui.Alerts.Toast.Make("Card deleted.", ToastDuration.Long, 16).Show(new CancellationTokenSource().Token);
            NavigationManager.NavigateTo("/anasayfa");

        }
        else
        {
            SemanticScreenReader.Announce("Error occured while deleting card: " + responseModel.Message);
            await CommunityToolkit.Maui.Alerts.Toast.Make("Error occured while deleting card: " + responseModel.Message, ToastDuration.Long, 16).Show(new CancellationTokenSource().Token);

        }
    }

    protected async void EditButtonClicked()
    {
        CardService cardService = new CardService();
        ResponseModel<string> responseModel = await cardService.UpdateCard(cardModel);

        if (responseModel.Success)
        {
            SemanticScreenReader.Announce("Card updated.");
            await CommunityToolkit.Maui.Alerts.Toast.Make("Card updated.", ToastDuration.Long, 16).Show(new CancellationTokenSource().Token);
            //NavigationManager.NavigateTo("/");
            pageStatus = DetailPageStatus.CardDetailStatus;
            StateHasChanged();



        }
        else
        {
            SemanticScreenReader.Announce("Error occured while updating card: " + responseModel.Message);
            await CommunityToolkit.Maui.Alerts.Toast.Make("Error occured while updating card: " + responseModel.Message, ToastDuration.Long, 16).Show(new CancellationTokenSource().Token);

        }
    }
    private async void OpenDisplayPagePopup()
    {
        await PopupAction.DisplayPopup(new MauiBlazor.Mobile.MauiPages.DisplayPage());
    }


    public async Task ShareUriAsync()
    {
        if (Microsoft.Maui.ApplicationModel.DataTransfer.Share.Default != null)
        {
            // Deeplinking to open the app on store to download first
            string shareUri = AppStoreConstants.AppLink;

            await ShareUri(Microsoft.Maui.ApplicationModel.DataTransfer.Share.Default, shareUri);
        }
    }

    public async Task ShareUri(IShare share, string shareUri)
    {
        if (share == null)
        {
            // Handle the case when share service is not available
            // You can display an error message or log a warning
            return;
        }

        try
        {
            await share.RequestAsync(new ShareTextRequest
            {
                Uri = shareUri,
                Title = $"Check out {cardModel.DisplayName}'s Card! Click to view (or download the app if needed).",
            });
        }
        catch (Exception ex)
        {
            // Handle any exceptions that might occur during sharing
            // You can log the exception or display an error message to the user
            Console.WriteLine($"Error occurred while sharing: {ex.Message}");
        }
    }


}
