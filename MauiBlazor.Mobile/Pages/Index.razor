@page "/"

@using MauiBlazor.Shared.Models;
@using Newtonsoft.Json;
@using MauiBlazor.Mobile.Data;
@using CommunityToolkit.Maui.Core;

@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

<PageTitle>Home</PageTitle>

@if (_cardList == null)
{

    @*<p>Loading ..</p>*@


    @(new MarkupString($@"<script src=""https://unpkg.com/@dotlottie/player-component@latest/dist/dotlottie-player.mjs"" type=""module""></script>"))
    <div class="full-screen-container">

        <dotlottie-player src="https://lottie.host/69531b5b-e989-4b1d-b26e-28c934bf467e/nqTskbP4j9.json" background="transparent" speed="1" style="width: 300px; height: 300px;" loop autoplay></dotlottie-player>

    </div>
}
else
{
    <h1 style="float; left;">My Cards</h1>
    <img style="float; right;" class ="img" src="images/add.png" alt="Add" width="40" height="40" @onclick="@(() => NavigationManager.NavigateTo("/add", forceLoad: true))" />
    <NavLink href="/add">add</NavLink>

    <div class="row-scrollable-container">
        @foreach (CardModel card in _cardList)
        {
            <div class="card" @onclick="@(() => CardDetailClicked(@card.Id))">
                <div class="card-body">
                    <h5 class="card-title" >@card.DisplayName</h5>
                    <p class="card-text">@card.JobTitle</p>
                    <p class="card-text"><small class="text-muted">@card.Phone</small></p>
                </div>
            </div>
        }
    </div>

    <h1>Scan History</h1>

    <div class="column-scrollable-container">
        @foreach (CardModel card in _cardList)
        {
            <div class="card" @onclick="@(() => CardDetailClicked(@card.Id))">
                <div class="card-body">
                    <h5 class="card-title">@card.DisplayName</h5>
                    <p class="card-text">@card.JobTitle</p>
                    <p class="card-text"><small class="text-muted">@card.Phone</small></p>
                </div>
            </div>
        }
    </div>
}

@code {

    List<CardModel> _cardList;
    protected override async Task OnInitializedAsync()
    {
        ResponseModel<List<CardModel>> responseModel = await CardService.GetHomePageDetails();
        SemanticScreenReader.Announce(responseModel.Message);
        await CommunityToolkit.Maui.Alerts.Toast.Make(responseModel.Message, ToastDuration.Long, 16).Show(new CancellationTokenSource().Token);

        if (responseModel.Success)
        {
            _cardList = responseModel.Data;

        }
        //NavigationManager.LocationChanged += HandleLocationChanged;

    }

    protected override async Task OnParametersSetAsync()
    {
        // This event will fire when the parameters change
        // Put your code here.  

    }

    protected void CardDetailClicked(int cardId)
    {

        NavigationManager.NavigateTo("/detail/" + cardId, forceLoad: true);
    }

    protected void GoToAddCardPage()
    {
        NavigationManager.NavigateTo("/add", forceLoad: true);
    }

    //private void HandleLocationChanged(object sender, LocationChangedEventArgs e)
    //{
    //    // rerender component
    //    StateHasChanged();
    //}

    //public void Dispose()
    //{
    //    // remove from the NavigationManager event
    //    NavigationManager.LocationChanged -= HandleLocationChanged;
    //}


}
