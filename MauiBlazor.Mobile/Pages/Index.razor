@page "/"

@using MauiBlazor.Shared.Models;
@using Newtonsoft.Json;
@using MauiBlazor.Mobile.Data;
@using CommunityToolkit.Maui.Core;
@using MauiBlazor.Mobile.Shared;
@using MauiBlazor.Mobile.Services;
@using Blazored.LocalStorage;

@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject LocalService localService

<style>
    .indicator-container {
        display: flex;
        flex-direction: row;
        justify-content: center; /* Center the items horizontally */
        align-items: center;
    }

    /* Your indicator styles */
    .indicator-circle {
        width: 10px;
        height: 10px;
        border-radius: 50%;
        background-color: #CCCCCC; /* Light gray as the default color */
        margin: 5px; /* Adjust margin as needed */
    }

    .selected-indicator {
        background-color: #555555; /* Dark gray as the color for the selected (visible) state */
    }
</style>



@if (_cardList == null)
{

    @(new MarkupString($@"<script src=""https://unpkg.com/@dotlottie/player-component@latest/dist/dotlottie-player.mjs"" type=""module""></script>"))
    <div class="full-screen-container">

        <dotlottie-player src="https://lottie.host/69531b5b-e989-4b1d-b26e-28c934bf467e/nqTskbP4j9.json" background="transparent" speed="1" style="width: 300px; height: 300px;" loop autoplay></dotlottie-player>

    </div>
}
else
{
    <div class="main-container">

        <h1 class="left-column title">My Cards</h1>
        <img class="right-column" src="Images/add.png" alt="Add" width="40" height="40" @onclick="@(() => NavigationManager.NavigateTo("/add", forceLoad: true))" />
    </div>
    <div class="row-scrollable-container">
        @foreach (CardModel card in _cardList)
        {
            <CustomCard CardModel="@card" OnCardClick="CardDetailClicked" />
        }

    </div>
    <div class="indicator-container">
        @for (int i = 0; i < _cardList.Count; i++)
        {
            @*<div class="indicator-circle @((i == @visibleCardIndex) ? "selected-indicator" : "")"></div>*@
        }
    </div>

    <h1 class="title">Scan History</h1>

    <div class="column-scrollable-container">
        @if (_latestScannedCardList == null)
        {

            <p>No latest scanned card found</p>

        }
        else
        {

            @foreach (CardModel card in _latestScannedCardList)
            {
                <CustomCard CardModel="@card" OnCardClick="CardDetailClicked"/>

            }
        }

    </div>
}

@code {

    List<CardModel> _cardList;
    List<CardModel> _latestScannedCardList = new List<CardModel>(); // Initialize the list
    Blazored.LocalStorage.ILocalStorageService localStorage;

    protected override async Task OnInitializedAsync()
    {



        ResponseModel<List<CardModel>> responseModel = await CardService.GetHomePageDetails();
        SemanticScreenReader.Announce(responseModel.Message);
        //await CommunityToolkit.Maui.Alerts.Toast.Make(responseModel.Message, ToastDuration.Long, 16).Show(new CancellationTokenSource().Token);

        if (responseModel.Success)
        {
            _cardList = responseModel.Data;
        }
        //await localStorage.SetItemAsync<int>("number", 17);
        ResponseModel<List<int>> responseModel1 = await localService.GetLatestScanedCards();

        if(responseModel1.Data != null)
        {
            foreach (int cardId in responseModel1.Data)
            {
                ResponseModel<CardModel> cardResponse = await CardService.GetCardDetailByCardId(cardId);
                if (cardResponse.Success)
                {
                    _latestScannedCardList.Add(cardResponse.Data);
                }
                else
                {
                    Preferences.Remove(cardId.ToString());

                }
            }
        }
        else
        {

        }


    }



    protected void CardDetailClicked(int cardId)
    {
        NavigationManager.NavigateTo("/detail/" + cardId, forceLoad: true);
    }

    protected void GoToAddCardPage()
    {
        NavigationManager.NavigateTo("/add", forceLoad: true);
    }



}
